version: '3'

# x-common:
#   &common
#   image: apache/airflow:2.7.3
#   user: "${AIRFLOW_UID}:0"
#   env_file:
#     - .env
#   volumes:
#     - ./src:/app
#     - ./airflow/dags:/opt/airflow/dags
#     - ./airflow/logs:/opt/airflow/logs
#     - ./airflow/plugins:/opt/airflow/plugins
#     - /var/run/docker.sock:/var/run/docker.sock
 
# x-depends-on:
#   &depends-on
#   depends_on:
#     postgres:
#       condition: service_healthy
#     airflow-init:
#       condition: service_completed_successfully

services:
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: source_system
      #this ENV variable is only required for the healthcheck section - if you don't specify it, the check command will fail stating the root user doesn't exist in posgres
      PGUSER: "postgres"
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # python-app:
  #   build:
  #     context: .
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      
  scheduler:
    build:
      context: .
    #image: airflow_sim:latest
    user: "${AIRFLOW_UID}:0"
    env_file:
      - .env
    volumes:
      - ./src:/app
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"
    secrets:
      - azure_secret
 
  webserver:
    build:
      context: .
    #image: airflow_sim:latest
    user: "${AIRFLOW_UID}:0"
    env_file:
      - .env
    volumes:
      - ./src:/app
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    secrets:
      - azure_secret
   
  airflow-init:
    build:
      context: .
    #image: airflow_sim:latest
    user: "${AIRFLOW_UID}:0"
    env_file:
      - .env
    volumes:
      - ./src:/app
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
        
secrets:
  azure_secret:
    file: ./azure_secret.txt

volumes:
  postgres:
    driver: local
  pgadmin-data: